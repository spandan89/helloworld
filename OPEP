/*
 * Command Sequence
 * 1. Reset
 * 2. Read PROM
 * 3. D1 - Pressure Conversion
 * 4. D2 - Temperature Conversion
 * 5. Read ADC Result 24 bit
 * 
 * Reset      = 0x1E
 * PROM Read  = 0xA0 to 0x AE
 * D1(2048)   = 0x46
 * D2(2048)   = 0x56
 * ADC Read   = 0x00
 * 
 * PROM Coefficient
 * 0xA0
 * C1 = 1010 001 0  = 0xA2 = 17861
 * C2 = 1010 010 0  = 0xA4
 * C3 = 1010 011 0  = 0xA6
 * C4 = 1010 100 0  = 0xA8
 * C5 = 1010 101 0  = 0xAA
 * C6 = 1010 110 0  = 0xAC
 * 0xAE
 */

#include <SPI.h>
#include <math.h> 

#define CMD_D1  0x46
#define CMD_D2  0x56
#define CMD_ADC 0x00
#define CMD_PROM  0xA0

unsigned long D1;
unsigned long D2;

int i =0;

const int ChipSelect = 7;
unsigned int C[8];

double P;
double T;
double dT;
double OFF;
double SENS;

#define Q1  pow(2,14)
#define Q2  pow(2,16)
#define Q3  pow(2,7)
#define Q4  pow(2,5)
#define Q5  pow(2,7)
#define Q6  pow(2,21)

#define P1  pow(2,21)
#define P2  pow(2,15)

void setup() {
  Serial.begin(9600);

  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));

  pinMode(ChipSelect, OUTPUT);
  SPI.begin();

  reset();

  for(int i =0; i<8; i++)
  {
    C[i] = readPROM(i);
    Serial.print("C[i]= ");
    Serial.println(C[i]);
  }
  
}

void loop() {
  // put your main code here, to run repeatedly:
  //delay(1000);

  for(i=0;i<10;i++)
  {
    readADC(CMD_D1);
  
    readADC(CMD_D2);
  
    Algorithm_PT();
  }

  while(1);
  //Algorithm();
}

void reset()
{
  digitalWrite(ChipSelect, LOW);
  SPI.transfer(0x1E);
  delay(5);
  digitalWrite(ChipSelect, HIGH);
}

unsigned int readPROM(char num)
{ 
  unsigned int ret;
  unsigned int rC=0;

  digitalWrite(ChipSelect, LOW);
  SPI.transfer(CMD_PROM+num*2);
  ret = SPI.transfer(0x00);
  rC = 256 * ret;
  ret = SPI.transfer(0x00);
  rC = rC + ret;
  digitalWrite(ChipSelect, HIGH);
  return rC;
}

void readADC(char cmd)
{
  unsigned int ret = 0;
  unsigned long temp = 0;
  
  digitalWrite(ChipSelect, LOW);
  SPI.transfer(cmd); // 2048 OSR Pressure
  delay(10);
  digitalWrite(ChipSelect, HIGH);

  //delay(10);
  
  digitalWrite(ChipSelect, LOW);
  SPI.transfer(CMD_ADC); // Read ADC value
  
  ret = SPI.transfer(0xFF);
  temp = 65536 * ret;
  ret = SPI.transfer(0xFF);
  temp = temp + (256 * ret);
  ret = SPI.transfer(0xFF);
  temp = temp + ret;
  digitalWrite(ChipSelect, HIGH);

  if (cmd == CMD_D1)
  {
    Serial.print("\nD1 Pressure value= \t");
    D1 = temp;
    Serial.println(D1);
  }
  else
  {
    Serial.print("\nD2 Temperature value= \t");
    D2 = temp;
    Serial.println(D2);
  }
}

void Algorithm_PT()
{
  
  dT = D2 - (C[5]*Q5);
  OFF = (C[2]*Q2) + (dT*C[4])/Q4;
  SENS = (C[1]*Q1)+ (dT*C[3])/Q3;

  T = 2000 + (dT*C[6]/Q6);
  P = (((D1*SENS) / P1)-OFF) / P2;

  Serial.println("T= ");
  printDouble(T,1000);

  Serial.println("P= ");
  printDouble(P,1000);
  
}

/*
void Algorithm()
{
  dT = D2 - C[5];
  OFF = C[2] + C[4] * dT;
  SENS = C[1] + C[3] * dT;

  T = 2000 + dT *C[6];
  P = (D1 * SENS) - OFF;

  printDouble(dT, 1000);
  printDouble(OFF, 1000);
  printDouble(SENS, 1000);
  
  printDouble(T,1000);
  printDouble(P,1000);
}
*/

void printDouble(double val, unsigned int pre)
{
  Serial.print(int(val));
  Serial.print(".");

  unsigned int frac;

  if(val >= 0)
    frac = (val - int(val))* pre;
  else
    frac = (int(val)-val)* pre;

  Serial.print(frac, DEC);
}
